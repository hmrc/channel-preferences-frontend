GET         /account/account-details/sa/update-email-address                        controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.displayChangeEmailAddress(email: Option[controllers.sa.prefs.EncryptedEmail])
POST        /account/account-details/sa/update-email-address                        controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.submitChangeEmailAddress
GET         /account/account-details/sa/update-email-address-thank-you              controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.displayChangeEmailAddressConfirmed
GET         /paperless/email-address/change                                         controllers.sa.prefs.internal.ManagePaperlessController.displayChangeEmailAddress(email: Option[controllers.sa.prefs.EncryptedEmail], hostContext: hostcontext.HostContext)
POST        /paperless/email-address/change                                         controllers.sa.prefs.internal.ManagePaperlessController.submitChangeEmailAddress(hostContext: hostcontext.HostContext)
GET         /paperless/email-address/change/confirmed                               controllers.sa.prefs.internal.ManagePaperlessController.displayChangeEmailAddressConfirmed(hostContext: hostcontext.HostContext)

GET         /account/account-details/sa/opt-out-email-reminders                     controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.displayStopPaperless
POST        /account/account-details/sa/opt-out-email-reminders                     controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.submitStopPaperless
GET         /account/account-details/sa/opt-out-email-reminders-thank-you           controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.displayStopPaperlessConfirmed
GET         /paperless/stop                                                         controllers.sa.prefs.internal.ManagePaperlessController.displayStopPaperless(hostContext: hostcontext.HostContext)
POST        /paperless/stop                                                         controllers.sa.prefs.internal.ManagePaperlessController.submitStopPaperless(hostContext: hostcontext.HostContext)
GET         /paperless/stop/confirmed                                               controllers.sa.prefs.internal.ManagePaperlessController.displayStopPaperlessConfirmed(hostContext: hostcontext.HostContext)

POST        /account/account-details/sa/resend-validation-email                     controllers.sa.prefs.internal.DeprecatedYTAManagePaperlessController.resendVerificationEmail
POST        /paperless/resend-verification-email                                    controllers.sa.prefs.internal.ManagePaperlessController.resendVerificationEmail(hostContext: hostcontext.HostContext)

GET         /account/account-details/sa/login-opt-in-email-reminders                controllers.sa.prefs.internal.DeprecatedYTALoginChoosePaperlessController.redirectToBTAOrInterstitialPage
GET         /account/account-details/sa/login-opt-in-email-reminders/:cohort        controllers.sa.prefs.internal.DeprecatedYTALoginChoosePaperlessController.displayInterstitialPrefsFormForCohort(cohort: Option[controllers.sa.prefs.internal.OptInCohort])
POST        /account/account-details/sa/login-opt-in-email-reminders                controllers.sa.prefs.internal.DeprecatedYTALoginChoosePaperlessController.submitPrefsFormForInterstitial

GET         /account/account-details/sa/opt-in-email-reminders-thank-you            controllers.sa.prefs.internal.DeprecatedYTAManageAccountChoosePaperlessController.thankYou(email: Option[controllers.sa.prefs.EncryptedEmail])
GET         /account/account-details/sa/opt-in-email-reminders                      controllers.sa.prefs.internal.DeprecatedYTAManageAccountChoosePaperlessController.displayPrefsForm(email: Option[controllers.sa.prefs.EncryptedEmail])
GET         /account/account-details/sa/opt-in-email-reminders/:cohort              controllers.sa.prefs.internal.DeprecatedYTAManageAccountChoosePaperlessController.displayPrefsFormForCohort(cohort: Option[controllers.sa.prefs.internal.OptInCohort], email: Option[controllers.sa.prefs.EncryptedEmail])
POST        /account/account-details/sa/opt-in-email-reminders                      controllers.sa.prefs.internal.DeprecatedYTAManageAccountChoosePaperlessController.submitPrefsFormForNonInterstitial
GET         /paperless/choose/nearly-done                                           controllers.sa.prefs.internal.ChoosePaperlessController.thankYou(email: Option[controllers.sa.prefs.EncryptedEmail], hostContext: hostcontext.HostContext)
GET         /paperless/choose                                                       controllers.sa.prefs.internal.ChoosePaperlessController.displayPrefsForm(email: Option[controllers.sa.prefs.EncryptedEmail], hostContext: hostcontext.HostContext)
GET         /paperless/choose/:cohort                                               controllers.sa.prefs.internal.ChoosePaperlessController.displayPrefsFormForCohort(cohort: Option[controllers.sa.prefs.internal.OptInCohort], email: Option[controllers.sa.prefs.EncryptedEmail], hostContext: hostcontext.HostContext)
POST        /paperless/choose                                                       controllers.sa.prefs.internal.ChoosePaperlessController.submitPrefsFormForNonInterstitial(hostContext: hostcontext.HostContext)

GET         /account/account-details/sa/upgrade-email-reminders                     controllers.sa.prefs.internal.UpgradeRemindersController.display(returnUrl: controllers.sa.prefs.Encrypted[String])
POST        /account/account-details/sa/upgrade-email-reminders                     controllers.sa.prefs.internal.UpgradeRemindersController.upgrade(returnUrl: controllers.sa.prefs.Encrypted[String])
GET         /account/account-details/sa/upgrade-email-reminders-thank-you           controllers.sa.prefs.internal.UpgradeRemindersController.thankYou(returnUrl: controllers.sa.prefs.Encrypted[String])

GET         /sa/print-preferences/:token                                            @controllers.sa.prefs.filing.FilingInterceptController.redirectWithEmailAddress(token: String, return_url: String, emailAddress: Option[controllers.sa.prefs.EncryptedEmail])
GET         /sa/print-preferences/verification/:token                               @controllers.sa.prefs.external.EmailValidationController.verify(token: String)

# Serves up the test gif that is used to determine if the service is up
GET         /sa/print-preferences/assets/*file                                      controllers.sa.prefs.Assets.at(path="/public", file)

# Partials
GET         /paperless/manage                                                       controllers.sa.prefs.partial.PaperlessPartialController.displayManagePaperlessPartial(hostContext: hostcontext.HostContext)
GET         /paperless/warnings                                                     controllers.sa.prefs.partial.PaperlessPartialController.displayPaperlessWarningsPartial
GET         /account/account-details/sa/email-reminders-status                      controllers.sa.prefs.partial.PaperlessPartialsForDeprecatedYTAEndpointsController.displayManagePaperlessPartial
GET         /account/preferences/warnings                                           controllers.sa.prefs.partial.PaperlessPartialsForDeprecatedYTAEndpointsController.displayPaperlessWarningsPartial
