->          /govuk-frontend                    govuk.Routes
->          /hmrc-frontend                     hmrcfrontend.Routes

GET         /assets/*file                                                           controllers.Assets.versioned(path="/public", file: Asset)

#Deprecated - use /paperless/activate
PUT         /paperless/activate/:formType/:taxIdentifier                            controllers.internal.ActivationController.activateLegacyFromTaxIdentifier(formType: model.FormType, taxIdentifier: String, hostContext: model.HostContext)

PUT         /paperless/activate                                                     controllers.internal.ActivationController.activate(hostContext: model.HostContext)
PUT         /paperless/activate-from-token/:svc/:token                              controllers.internal.ActivationController.activateFromToken(svc: String, token: String, hostContext: model.HostContext)
GET         /paperless/preferences                                                  controllers.internal.ActivationController.preferences()

GET         /paperless/email-address/change                                         controllers.internal.ManagePaperlessController.displayChangeEmailAddress(email: Option[model.EncryptedEmail], hostContext: model.HostContext)
POST        /paperless/email-address/change                                         controllers.internal.ManagePaperlessController.submitChangeEmailAddress(hostContext: model.HostContext)
GET         /paperless/email-address/change/confirmed                               controllers.internal.ManagePaperlessController.displayChangeEmailAddressConfirmed(hostContext: model.HostContext)
GET         /paperless/email-address/how-to-verify                                  controllers.internal.ManagePaperlessController.howToVerifyEmail(hostContext: model.HostContext)
GET         /paperless/email-address/delivery-failed                                controllers.internal.ManagePaperlessController.deliveryFailed(hostContext: model.HostContext)

GET         /paperless/stop                                                         controllers.internal.ManagePaperlessController.displayStopPaperless(hostContext: model.HostContext)
POST        /paperless/stop                                                         controllers.internal.ManagePaperlessController.submitStopPaperless(hostContext: model.HostContext)
GET         /paperless/stop/confirmed                                               controllers.internal.ManagePaperlessController.displayStopPaperlessConfirmed(hostContext: model.HostContext)

POST        /paperless/resend-verification-email                                    controllers.internal.ManagePaperlessController.resendVerificationEmail(hostContext: model.HostContext)

GET         /paperless/choose/nearly-done                                           controllers.internal.ChoosePaperlessController.displayNearlyDone(email: Option[model.EncryptedEmail], hostContext: model.HostContext)
GET         /paperless/choose                                                       controllers.internal.ChoosePaperlessController.redirectToDisplayFormWithCohort(email: Option[model.EncryptedEmail], hostContext: model.HostContext)

GET         /paperless/choose/cohort/:svc/:token                                    controllers.internal.ChoosePaperlessController.redirectToDisplayFormWithCohortBySvc(svc: String, token: String, email: Option[model.EncryptedEmail], hostContext: model.HostContext)
GET         /paperless/choose/:svc/:token                                           controllers.internal.ChoosePaperlessController.displayFormBySvc(svc: String, token: String, email: Option[model.EncryptedEmail], hostContext: model.HostContext)
POST        /paperless/choose/:svc/:token                                           controllers.internal.ChoosePaperlessController.submitFormBySvc(svc: String, token: String, hostContext: model.HostContext)

GET         /paperless/choose/:cohort                                               controllers.internal.ChoosePaperlessController.displayForm(cohort: Option[controllers.internal.OptInCohort], email: Option[model.EncryptedEmail], hostContext: model.HostContext)
POST        /paperless/choose                                                       controllers.internal.ChoosePaperlessController.submitForm(hostContext: model.HostContext)

GET         /paperless/language-choose                                              controllers.internal.ChoosePaperlessController.displayLanguageForm(hostContext: model.HostContext)
POST        /paperless/language-choose                                              controllers.internal.ChoosePaperlessController.submitLanguageForm(hostContext: model.HostContext)

GET         /sa/print-preferences/:token                                            controllers.filing.FilingInterceptController.redirectWithEmailAddress(token: String, return_url: String, emailAddress: Option[model.EncryptedEmail])
GET         /sa/print-preferences/verification/:token                               controllers.external.EmailValidationController.verify(token: String)

# Return json paperless status
GET         /paperless/status                                                       controllers.PaperlessStatusController.getPaperlessStatus(hostContext: model.HostContext)

# Serves up the test gif that is used to determine if the service is up
GET         /sa/print-preferences/assets/*file                                      controllers.internal.PlatformHealthCheckController.getAsset(file)

# Partials
GET         /paperless/manage                                                       partial.paperless.PaperlessPartialController.displayManagePaperlessPartial(hostContext: model.HostContext)
GET         /paperless/warnings                                                     partial.paperless.PaperlessPartialController.displayPaperlessWarningsPartial(hostContext: model.HostContext)

# Check your settings
GET         /paperless/check-settings                                               controllers.internal.ManagePaperlessController.checkSettings(hostContext: model.HostContext)

# Opt In Cohort API
GET         /paperless/opt-in-cohort/display/:cohort                                controllers.internal.ChoosePaperlessController.displayCohort(cohort: Option[controllers.internal.OptInCohort])
POST        /paperless/opt-in-cohort/nop                                            controllers.internal.ChoosePaperlessController.cohortNop()
GET         /paperless/opt-in-cohort/list                                           controllers.internal.ChoosePaperlessController.cohortList()